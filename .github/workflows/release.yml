name: Build and Upload .NET Artifacts

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Enter the Release Tag (e.g., v1.0) from an existing release'
        required: true
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Step 1: Install jq (dependency for JSON processing)
      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      # Step 2: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Debug release event information
      - name: Debug Release Information
        run: |
          cat "$GITHUB_EVENT_PATH"  # Output event info for debugging

      # Step 4: Determine Release ID when triggered via workflow_dispatch
      - name: Get Release ID by Tag (workflow_dispatch)
        id: release_version
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ -z "${{ github.event.inputs.release_tag }}" ]; then
            echo "No release tag provided, aborting upload."
            exit 1
          fi
          echo "Looking for release by tag: ${{ github.event.inputs.release_tag }}"

          # Get the release info via GitHub API
          release_info=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.release_tag }}")

          # Extract the release ID using jq
          release_id=$(echo "$release_info" | jq --raw-output .id)

          # Check if the release ID was found
          if [ "$release_id" == "null" ] || [ -z "$release_id" ]; then
            echo "Error: Release ID not found for tag ${{ github.event.inputs.release_tag }}. Please check the tag name."
            exit 1
          fi

          echo "Release ID: $release_id"
          echo "RELEASE_ID=$release_id" >> $GITHUB_ENV

      # Step 5: Determine Release ID when triggered via a release event
      - name: Get Release ID from Release Event
        id: release
        if: ${{ github.event_name == 'release' }}
        run: |
          # Extract the release ID from the event payload
          RELEASE_ID=$(jq --raw-output '.release.id' "$GITHUB_EVENT_PATH")

          # Validate the extracted release ID
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Error: Release ID not found. Please check the event payload."
            exit 1
          fi

          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          echo "Environment variable RELEASE_ID is set to: $RELEASE_ID"

      # Step 6: Set up the .NET SDK
      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.x'

      # Step 7: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 8: Publish for linux-arm64
      - name: Publish for linux-arm64
        run: |
          dotnet publish -c Release --self-contained -r linux-arm64 --output ./publish/linux-arm64

      # Step 9: Publish for linux-arm
      - name: Publish for linux-arm
        run: |
          dotnet publish -c Release --self-contained -r linux-arm --output ./publish/linux-arm

      # Step 10: Create ZIP for linux-arm64 artifacts
      - name: Create ZIP for linux-arm64
        run: |
          cd ./publish
          zip -rj linux-arm64.zip linux-arm64/*
          echo "upload_url_linux-arm64=https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ env.RELEASE_ID }}/assets?name=linux-arm64.zip" >> $GITHUB_ENV

      # Step 11: Create ZIP for linux-arm artifacts
      - name: Create ZIP for linux-arm
        run: |
          cd ./publish
          zip -rj linux-arm.zip linux-arm/*
          echo "upload_url_linux-arm=https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ env.RELEASE_ID }}/assets?name=linux-arm.zip" >> $GITHUB_ENV

      # Step 12: Upload the linux-arm64 artifact to the release
      - name: Upload linux-arm64 artifact
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ env.upload_url_linux-arm64 }}
          asset_path: ./publish/linux-arm64.zip
          asset_name: linux-arm64.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 13: Upload the linux-arm artifact to the release
      - name: Upload linux-arm artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.upload_url_linux-arm }}
          asset_path: ./publish/linux-arm.zip
          asset_name: linux-arm.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
